import torch
import torch.nn as nn

class DistanceCNN(nn.Module):
    def __init__(self, num_bins=370):
        super(DistanceCNN, self).__init__()

        self.leaky_relu = nn.LeakyReLU(negative_slope=0.03)
        self.softmax = nn.Softmax(dim=1)

        # Convolutional + pooling blocks
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool2d(2, 2)

        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool2d(2, 2)

        self.conv3 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.pool3 = nn.MaxPool2d(2, 2)

        # Final feature map size: (32, 51, 60)
        self.flattened_size = 32 * 51 * 60

        self.fc1 = nn.Linear(self.flattened_size, 1024)
        self.fc2 = nn.Linear(1024, num_bins)

    def forward(self, x):
        x = self.leaky_relu(self.conv1(x))
        x = self.pool1(x)

        x = self.leaky_relu(self.conv2(x))
        x = self.pool2(x)

        x = self.leaky_relu(self.conv3(x))
        x = self.pool3(x)

        x = x.view(-1, self.flattened_size)
        x = self.leaky_relu(self.fc1(x))
        x = self.softmax(self.fc2(x))
        return x
